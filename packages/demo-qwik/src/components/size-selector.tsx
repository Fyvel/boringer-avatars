// GENERATED BY MITOSIS

import { AvatarSize, sizes } from "../utils/common.utils";
import {
  Fragment,
  component$,
  h,
  useClientEffect$,
  useStore,
  useWatch$,
} from "@builder.io/qwik";
import type { SizeSelectorProps } from "./size-selector.utils";
export const handleChange = function handleChange(props, state, event: any) {
  const newSize =
    ((event?.target as HTMLInputElement)?.value as AvatarSize) ||
    AvatarSize.Medium;
  state.selectedSize = newSize;
  props.onChange$(newSize);
};
export const getLabelClass = function getLabelClass(
  props,
  state,
  sizeEntry: [string, string]
) {
  return `radio-label ${sizeEntry[1] === state.selectedSize ? "selected" : ""}`;
};
export const getInputId = function getInputId(
  props,
  state,
  sizeEntry: [string, string]
) {
  return `radio-${sizeEntry[0].toLowerCase()}`;
};
export const getSizeDotClass = function getSizeDotClass(
  props,
  state,
  sizeEntry: [string, string]
) {
  return `size-dot ${sizeEntry[0].toLowerCase()}`;
};
export const SizeSelector = component$((props: any) => {
  const state = useStore<any>({ selectedSize: AvatarSize.Medium });
  useClientEffect$(() => {
    state.selectedSize = props.size || AvatarSize.Medium;
  });
  useWatch$(({ track }) => {
    props && track(props, "size");
    state.selectedSize = props.size || AvatarSize.Medium;
  });
  return (
    <div class="size-selector widget-wrapper">
      {(sizes || []).map(function (entry) {
        return (
          <label
            class={getLabelClass(props, state, entry)}
            for={getInputId(props, state, entry)}
          >
            <input
              type="radio"
              class="radio-item sr-only"
              name="size-option"
              id={getInputId(props, state, entry)}
              value={entry[1]}
              onChange$={(event) => handleChange(props, state, event)}
            ></input>
            <div class={getSizeDotClass(props, state, entry)}></div>
          </label>
        );
      })}
    </div>
  );
});
export default SizeSelector;
